---
title: Intial Design Plan & Development Plan
description: Development workflow and best practices for Sports Live.
---


## 🎨 Design Artifacts
- **Wireframes (Figma/Excalidraw)** → Login Page, Dashboard, Match Input Form, Live Viewer Page  
- **Architecture Diagram** → Frontend (React) ↔ Backend (Express) ↔ Database (Postgres/MongoDB) ↔ WebSocket  

---

## 🏗️ System Architecture Overview

### a) Frontend (React)
- Displays live match data, timelines, and match setup forms  
- Pages: Login, Dashboard, Preferences  
- Talks to backend via REST APIs and WebSockets  

### b) Backend (Node.js + Express)
- Handles API requests from frontend  
- Manages authentication, CRUD for matches, events  
- Pushes live updates via WebSockets  

### c) Database (Postgres/MongoDB)
- Stores matches, events, players, teams, and user preferences  

---

## 🔗 Backend API Endpoints

### Auth
- `POST /auth/login` → User login  
- `POST /auth/signup` → Create new user  
- `POST /auth/logout` → End session  

### Matches
- `POST /matches` → Create new match  
- `GET /matches` → Get all matches  
- `GET /matches/:id` → Get single match  
- `PUT /matches/:id` → Update match info  
- `DELETE /matches/:id` → Delete match  

### Events
- `POST /matches/:id/events` → Add event (goal, foul, substitution, etc.)  
- `PUT /matches/:id/events/:eventId` → Edit event  
- `DELETE /matches/:id/events/:eventId` → Remove event  

### Feed
- `GET /matches/:id/feed` → Get current match state  
- `GET /matches/:id/timeline` → Get chronological list of events  

### Preferences
- `GET /users/:id/preferences` → Get user preferences  
- `PUT /users/:id/preferences` → Update preferences  

---

## 🗄️ Database Schema

**Users**  
- user_id (PK)  
- email  
- password_hash  
- favorite_teams  

**Teams**  
- team_id (PK)  
- name  
- logo_url  

**Players**  
- player_id (PK)  
- name  
- team_id (FK)  

**Matches**  
- match_id (PK)  
- home_team_id (FK)  
- away_team_id (FK)  
- start_time  
- venue  
- status (scheduled, live, paused, ended)  

**Events**  
- event_id (PK)  
- match_id (FK)  
- timestamp  
- event_type (goal, foul, substitution, etc.)  
- description  
- team_id (FK, optional)  
- player_id (FK, optional)  

---

## 🎨 Frontend Components (React)

### Pages
1. **LoginPage**  
   - Inputs: Email, Password  
   - Buttons: Sign In, Forgot Password, Sign Up  

2. **Dashboard**  
   - TopNav: Logo, User Profile, Logout button  
   - Sidebar: Links to Live Matches, Match Setup, Event Timeline, Preferences  
   - Main Area:  
     - **LiveScoreboard**: Teams, logos, score, timer, possession  
     - **EventTimeline**: Vertical list of events  
     - **MatchControlPanel**: Pause/Resume, Add Event form  

3. **PreferencesPage**  
   - Select favorite teams  
   - Choose default layout  
   - Toggle notifications  

### Reusable Components
- MatchCard  
- EventItem  
- TeamSelector  
- TimeDisplay  
- FormModal (add/edit matches/events)  

---

## 🔄 Integration Flow

1. Admin/Operator creates a match via `/matches`  
2. Operator adds live events manually via `/matches/:id/events`  
3. Backend stores the event in **Events** table  
4. Backend updates **Matches** table with new score/time  
5. Frontend fetches state via `/matches/:id/feed`  
6. WebSocket pushes live updates instantly  
7. Preferences API customizes what each user sees  

---
